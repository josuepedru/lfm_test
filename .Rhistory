if (sd == "neweywest") {
coeftest_result <- coeftest(model, vcov. = NeweyWest(model))
tibble(term = rownames(coeftest_result),
estimate = coeftest_result[, "Estimate"],
std.error = coeftest_result[, "Std. Error"],
statistic = coeftest_result[, "t value"],
p.value = coeftest_result[, "Pr(>|t|)"])
} else if (sd == "standard") {
broom::tidy(model)
}
)) %>%
select(-model) %>%
unnest(tidy_model) %>%
select(-statistic)
# loadings
loadings <- coefficients %>%
filter(term != "(Intercept)")
# intercept coefficients
intercepts <- coefficients %>%
filter(term == "(Intercept)")
# get R-squared and Adjusted R-squared from each model
models <- models %>%
rowwise(Portfolio) %>%
mutate(r_squared = summary(model)$r.squared,
adj_r_squared = summary(model)$adj.r.squared) %>%
select(Portfolio, r_squared, adj_r_squared)
# residuals
residuals <- data_regression %>%
group_by(Portfolio) %>%
do(modelo= (lm(formula = paste("Return ~", rhs_formula), data = .))) %>%
rowwise() %>%
mutate(coeficientes = list(coef(modelo)),
residuos = list(residuals(modelo))) %>%
select(Portfolio, residuos) %>%
tidyr::unnest(residuos) %>%
group_by(Portfolio) %>%
mutate(id = row_number())%>%
pivot_wider(names_from = Portfolio, values_from = residuos, id_cols = id) %>%
select(-id)
## GRS test
# Sigma hat object
Sigma_hat <- cov(residuals, use = "pairwise.complete.obs")
# Calculate the number of assets, the number of factors, and the number of observations
N <- ncol(testasset)
K <- ncol(factors)
T <- nrow(testasset)
# Calculate the expected factor returns (also the risk premia)
E_f <- factors %>%
select(where(is.numeric)) %>%
colMeans(na.rm = TRUE)
## Calculate the Omega matrix
# let the factors data frame in the matrix form
factors_matrix <- factors %>%
select_if(is.numeric)
factors_matrix <- as.matrix(factors_matrix)
# compute the omega matrix
Omega <- (1/T) * t(factors_matrix - E_f) %*% (factors_matrix - E_f)
## Calculate the test statistic and p-value
# let the intercept data frame in the matrix form
intercepts_matrix <- intercepts %>%
ungroup() %>%
select(estimate)
intercepts_matrix <- as.matrix(intercepts_matrix)
# compute p-value
test_statistic <- ((T - N - K)/N) * (1 + t(E_f) %*% solve(Omega) %*% E_f)^(-1) *t(intercepts_matrix) %*% Sigma_hat%*% (intercepts_matrix)
p_value <- pf(test_statistic, N, T - N - K, lower.tail = FALSE)
# output
return(list(loadings = loadings, residuals = residuals,
intercepts = intercepts, p_value = p_value,
risk_premium = E_f, r_squared_adj = models))
}
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)
ts_test <- function(testasset, factors, startdate = NULL, enddate = NULL, sd = c("standard", "neweywest")){
sd <- match.arg(sd) # check if sd specified is in the list, if not provided "standard" is the default
# identify variables with class Date
date_cols <- names(testasset)[sapply(testasset, function(x) class(x) == "Date")]
# rename those to "Date" in order to manipulate
testasset <- rename(testasset, Date = all_of(date_cols))
# doing the same for the factors data frame
date_cols <- names(factors)[sapply(factors, function(x) class(x) == "Date")]
factors <- rename(factors, Date = all_of(date_cols))
# Filter the data based on startdate and enddate if provided
if (!is.null(startdate) && !is.null(enddate)) {
testasset <- testasset %>%
filter(Date >= startdate, Date <= enddate)
factors <- factors %>%
filter(Date >= startdate, Date <= enddate)
}
# pivot long the testasset data frame in order to join with the factors data frame
data_regression <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
full_join(factors, by= "Date")
# Generate the right-hand side of the formula string
rhs_formula <- factors %>%
dplyr::select(-Date) %>%
summarise(rhs_formula = paste(names(.), collapse = " + ")) %>%
pull(rhs_formula)
# employ regression in order to extract models for each portfolio
models <- data_regression %>%
group_by(Portfolio) %>%
do(model = lm(formula = paste("Return ~", rhs_formula), data = .))
# employ regression in order to extract coefficients
coefficients <- models %>%
rowwise() %>%
mutate(tidy_model = list(
if (sd == "neweywest") {
coeftest_result <- coeftest(model, vcov. = NeweyWest(model))
tibble(term = rownames(coeftest_result),
estimate = coeftest_result[, "Estimate"],
std.error = coeftest_result[, "Std. Error"],
statistic = coeftest_result[, "t value"],
p.value = coeftest_result[, "Pr(>|t|)"])
} else if (sd == "standard") {
broom::tidy(model)
}
)) %>%
select(-model) %>%
unnest(tidy_model) %>%
select(-statistic)
# loadings
loadings <- coefficients %>%
filter(term != "(Intercept)")
# intercept coefficients
intercepts <- coefficients %>%
filter(term == "(Intercept)")
# get R-squared and Adjusted R-squared from each model
models <- models %>%
rowwise(Portfolio) %>%
mutate(r_squared = summary(model)$r.squared,
adj_r_squared = summary(model)$adj.r.squared) %>%
select(Portfolio, r_squared, adj_r_squared)
# residuals
residuals <- data_regression %>%
group_by(Portfolio) %>%
do(modelo= (lm(formula = paste("Return ~", rhs_formula), data = .))) %>%
rowwise() %>%
mutate(coeficientes = list(coef(modelo)),
residuos = list(residuals(modelo))) %>%
select(Portfolio, residuos) %>%
tidyr::unnest(residuos) %>%
group_by(Portfolio) %>%
mutate(id = row_number())%>%
pivot_wider(names_from = Portfolio, values_from = residuos, id_cols = id) %>%
select(-id)
## GRS test
# Sigma hat object
Sigma_hat <- cov(residuals, use = "pairwise.complete.obs")
# Calculate the number of assets, the number of factors, and the number of observations
N <- ncol(testasset)
K <- ncol(factors)
T <- nrow(testasset)
# Calculate the expected factor returns (also the risk premia)
E_f <- factors %>%
select(where(is.numeric)) %>%
colMeans(na.rm = TRUE)
## Calculate the Omega matrix
# let the factors data frame in the matrix form
factors_matrix <- factors %>%
select_if(is.numeric)
factors_matrix <- as.matrix(factors_matrix)
# compute the omega matrix
Omega <- (1/T) * t(factors_matrix - E_f) %*% (factors_matrix - E_f)
## Calculate the test statistic and p-value
# let the intercept data frame in the matrix form
intercepts_matrix <- intercepts %>%
ungroup() %>%
select(estimate)
intercepts_matrix <- as.matrix(intercepts_matrix)
# compute p-value
test_statistic <- ((T - N - K)/N) * (1 + t(E_f) %*% solve(Omega) %*% E_f)^(-1) *t(intercepts_matrix) %*% Sigma_hat%*% (intercepts_matrix)
p_value <- pf(test_statistic, N, T - N - K, lower.tail = FALSE)
# output
return(list(loadings = loadings, residuals = residuals,
intercepts = intercepts, p_value = p_value,
risk_premium = E_f, r_squared_adj = models))
}
# import some factors
ff_factors <- read.csv("F-F_Research_Data_Factors.csv") %>%
select(Date=X,`Excess Market Return`= Mkt.RF, SMB, HML) %>%
mutate(Date=as.Date(paste0(Date,"01"), format="%Y%m%d"))
# generate random portfolios return
testasset <- data.frame(date = ff_factors$Date,
Portfolio1=rnorm(nrow(ff_factors),mean = 0.05, sd = 0.2),
Portfolio2=rnorm(nrow(ff_factors),mean = 0.10, sd = 0.8),
Portfolio3=rnorm(nrow(ff_factors),mean = 0.15, sd = 0.10),
Portfolio4=rnorm(nrow(ff_factors),mean = 0.40, sd = 0.05))
# create factors data frame
factors <- data.frame(DATE = ff_factors$Date,
`Excess Market Return`=ff_factors$`Excess Market Return`,
SMB = ff_factors$SMB,
HML = ff_factors$HML)
# apply the function for different windows
result1 <- ts_test(testasset, factors,
startdate = "2000-01-01",
enddate = "2008-01-01")
result2 <- ts_test(testasset, factors,
startdate = "2008-01-01",
enddate = "2022-01-01")
View(result1)
View(result1[["r_squared_adj"]])
View(result1[["intercepts"]])
View(result1[["residuals"]])
View(result1[["loadings"]])
View(result1)
View(result1[["loadings"]])
# apply the function for different windows
result1 <- ts_test(testasset, factors,sd == "neweywest",
startdate = "2000-01-01",
enddate = "2008-01-01")
# apply the function for different windows
result1 <- ts_test(testasset, factors,sd = "neweywest",
startdate = "2000-01-01",
enddate = "2008-01-01")
View(result1[["loadings"]])
result2 <- ts_test(testasset, factors,
startdate = "2000-01-01",
enddate = "2008-01-01")
View(result2)
View(result2[["loadings"]])
# identify variables with class Date
date_cols <- names(testasset)[sapply(testasset, function(x) class(x) == "Date")]
# rename those to "Date" in order to manipulate
testasset <- rename(testasset, Date = all_of(date_cols))
# doing the same for the factors data frame
date_cols <- names(factors)[sapply(factors, function(x) class(x) == "Date")]
factors <- rename(factors, Date = all_of(date_cols))
# Filter the data based on startdate and enddate if provided
if (!is.null(startdate) && !is.null(enddate)) {
testasset <- testasset %>%
filter(Date >= startdate, Date <= enddate)
factors <- factors %>%
filter(Date >= startdate, Date <= enddate)
}
# generate random portfolios return
testasset <- data.frame(date = ff_factors$Date,
Portfolio1=rnorm(nrow(ff_factors),mean = 0.05, sd = 0.2),
Portfolio2=rnorm(nrow(ff_factors),mean = 0.10, sd = 0.8),
Portfolio3=rnorm(nrow(ff_factors),mean = 0.15, sd = 0.10))
# identify variables with class Date
date_cols <- names(testasset)[sapply(testasset, function(x) class(x) == "Date")]
# rename those to "Date" in order to manipulate
testasset <- rename(testasset, Date = all_of(date_cols))
# doing the same for the factors data frame
date_cols <- names(factors)[sapply(factors, function(x) class(x) == "Date")]
factors <- rename(factors, Date = all_of(date_cols))
# Filter the data based on startdate and enddate if provided
if (!is.null(startdate) && !is.null(enddate)) {
testasset <- testasset %>%
filter(Date >= startdate, Date <= enddate)
factors <- factors %>%
filter(Date >= startdate, Date <= enddate)
}
# pivot long the testasset data frame in order to join with the factors data frame
data_regression <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
full_join(factors, by= "Date")
View(data_regression)
## First-stage: time-series regression
# Generate the right-hand side of the formula string
rhs_formula <- factors %>%
dplyr::select(-Date) %>%
summarise(rhs_formula = paste(names(.), collapse = " + ")) %>%
pull(rhs_formula)
# employ regression in order to extract coefficients
coefficients <- data_regression %>%
group_by(Portfolio) %>%
do(broom::tidy(
lm(formula = paste("Return ~", rhs_formula), data = .),
)) %>%
select(-statistic)
View(coefficients)
# loadings
loadings <- coefficients %>%
filter(term != "(Intercept)")
# intercept coefficients
intercepts <- coefficients %>%
filter(term == "(Intercept)")
# residuals
residuals <- data_regression %>%
group_by(Portfolio) %>%
do(modelo= (lm(formula = paste("Return ~", rhs_formula), data = .))) %>%
rowwise() %>%
mutate(coeficientes = list(coef(modelo)),
residuos = list(residuals(modelo))) %>%
select(Portfolio, residuos) %>%
tidyr::unnest(residuos) %>%
group_by(Portfolio) %>%
mutate(id = row_number())%>%
pivot_wider(names_from = Portfolio, values_from = residuos, id_cols = id) %>%
select(-id)
View(residuals)
### second-stage: cross-section and fama-mcbeth
#if(model=="cross-section"){
## cross-section regression
# put loadings in the long version
loadings_long <- loadings %>%
select(Portfolio, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate)
# obtain average excess return and put it the long version
average_excess <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
group_by(Portfolio) %>%
summarise(`Average Excess Return`=mean(Return))
View(average_excess)
# join and employ regression
cross_data <- inner_join(average_excess,loadings_long,by="Portfolio")# %>%
View(cross_data)
# join and employ regression
cross_data <- inner_join(average_excess,loadings_long,by="Portfolio") %>%
lm(formula = paste("`Average Excess Return`~", rhs_formula),data=.)
summary(cross_data)
# generate random portfolios return
testasset <- data.frame(date = ff_factors$Date,
Portfolio1=rnorm(nrow(ff_factors),mean = 0.05, sd = 0.2),
Portfolio2=rnorm(nrow(ff_factors),mean = 0.10, sd = 0.8),
Portfolio3=rnorm(nrow(ff_factors),mean = 0.15, sd = 0.10),
Portfolio4=rnorm(nrow(ff_factors),mean = 0.15, sd = 0.10),
Portfolio5=rnorm(nrow(ff_factors),mean = 0.15, sd = 0.10))
# identify variables with class Date
date_cols <- names(testasset)[sapply(testasset, function(x) class(x) == "Date")]
# rename those to "Date" in order to manipulate
testasset <- rename(testasset, Date = all_of(date_cols))
# doing the same for the factors data frame
date_cols <- names(factors)[sapply(factors, function(x) class(x) == "Date")]
factors <- rename(factors, Date = all_of(date_cols))
# Filter the data based on startdate and enddate if provided
if (!is.null(startdate) && !is.null(enddate)) {
testasset <- testasset %>%
filter(Date >= startdate, Date <= enddate)
factors <- factors %>%
filter(Date >= startdate, Date <= enddate)
}
# pivot long the testasset data frame in order to join with the factors data frame
data_regression <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
full_join(factors, by= "Date")
## First-stage: time-series regression
# Generate the right-hand side of the formula string
rhs_formula <- factors %>%
dplyr::select(-Date) %>%
summarise(rhs_formula = paste(names(.), collapse = " + ")) %>%
pull(rhs_formula)
# employ regression in order to extract coefficients
coefficients <- data_regression %>%
group_by(Portfolio) %>%
do(broom::tidy(
lm(formula = paste("Return ~", rhs_formula), data = .),
)) %>%
select(-statistic)
# loadings
loadings <- coefficients %>%
filter(term != "(Intercept)")
# intercept coefficients
intercepts <- coefficients %>%
filter(term == "(Intercept)")
View(coefficients)
# residuals
residuals <- data_regression %>%
group_by(Portfolio) %>%
do(modelo= (lm(formula = paste("Return ~", rhs_formula), data = .))) %>%
rowwise() %>%
mutate(coeficientes = list(coef(modelo)),
residuos = list(residuals(modelo))) %>%
select(Portfolio, residuos) %>%
tidyr::unnest(residuos) %>%
group_by(Portfolio) %>%
mutate(id = row_number())%>%
pivot_wider(names_from = Portfolio, values_from = residuos, id_cols = id) %>%
select(-id)
View(residuals)
### second-stage: cross-section and fama-mcbeth
#if(model=="cross-section"){
## cross-section regression
# put loadings in the long version
loadings_long <- loadings %>%
select(Portfolio, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate)
# obtain average excess return and put it the long version
average_excess <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
group_by(Portfolio) %>%
summarise(`Average Excess Return`=mean(Return))
# join and employ regression
cross_data <- inner_join(average_excess,loadings_long,by="Portfolio") %>%
lm(formula = paste("`Average Excess Return`~", rhs_formula),data=.)
summary(cross_data)
testasset <- data.frame(date = ff_factors$Date,
Portfolio1=rnorm(nrow(ff_factors),mean = 0.05, sd = 0.2),
Portfolio2=rnorm(nrow(ff_factors),mean = 0.10, sd = 0.8),
Portfolio3=rnorm(nrow(ff_factors),mean = 0.15, sd = 0.10),
Portfolio4=rnorm(nrow(ff_factors),mean = 0.20, sd = 0.60),
Portfolio5=rnorm(nrow(ff_factors),mean = 0.60, sd = 0.80))
# create factors data frame
factors <- data.frame(DATE = ff_factors$Date,
`Excess Market Return`=ff_factors$`Excess Market Return`,
SMB = ff_factors$SMB,
HML = ff_factors$HML)
# apply the function for different windows
result1 <- ts_test(testasset, factors,
startdate = "2000-01-01",
enddate = "2008-01-01")
result2 <- ts_test(testasset, factors,
startdate = "2008-01-01",
enddate = "2022-01-01")
### Cross-sectional/Fama-Mcbeth test ####
cross_sec_test <- function(testasset, factors, model, startdate = NULL, enddate = NULL){
# identify variables with class Date
date_cols <- names(testasset)[sapply(testasset, function(x) class(x) == "Date")]
# rename those to "Date" in order to manipulate
testasset <- rename(testasset, Date = all_of(date_cols))
# doing the same for the factors data frame
date_cols <- names(factors)[sapply(factors, function(x) class(x) == "Date")]
factors <- rename(factors, Date = all_of(date_cols))
# Filter the data based on startdate and enddate if provided
if (!is.null(startdate) && !is.null(enddate)) {
testasset <- testasset %>%
filter(Date >= startdate, Date <= enddate)
factors <- factors %>%
filter(Date >= startdate, Date <= enddate)
}
# pivot long the testasset data frame in order to join with the factors data frame
data_regression <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
full_join(factors, by= "Date")
## First-stage: time-series regression
# Generate the right-hand side of the formula string
rhs_formula <- factors %>%
dplyr::select(-Date) %>%
summarise(rhs_formula = paste(names(.), collapse = " + ")) %>%
pull(rhs_formula)
# employ regression in order to extract coefficients
coefficients <- data_regression %>%
group_by(Portfolio) %>%
do(broom::tidy(
lm(formula = paste("Return ~", rhs_formula), data = .),
)) %>%
select(-statistic)
# loadings
loadings <- coefficients %>%
filter(term != "(Intercept)")
# intercept coefficients
intercepts <- coefficients %>%
filter(term == "(Intercept)")
# residuals
residuals <- data_regression %>%
group_by(Portfolio) %>%
do(modelo= (lm(formula = paste("Return ~", rhs_formula), data = .))) %>%
rowwise() %>%
mutate(coeficientes = list(coef(modelo)),
residuos = list(residuals(modelo))) %>%
select(Portfolio, residuos) %>%
tidyr::unnest(residuos) %>%
group_by(Portfolio) %>%
mutate(id = row_number())%>%
pivot_wider(names_from = Portfolio, values_from = residuos, id_cols = id) %>%
select(-id)
### second-stage: cross-section and fama-mcbeth
if(model=="cross-section"){
## cross-section regression
# put loadings in the long version
loadings_long <- loadings %>%
select(Portfolio, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate)
# obtain average excess return and put it the long version
average_excess <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
group_by(Portfolio) %>%
summarise(`Average Excess Return`=mean(Return))
# join and employ regression
cross_data <- inner_join(average_excess,loadings_long,by="Portfolio") %>%
lm(formula = paste("`Average Excess Return`~", rhs_formula),data=.)
# obtain risk premia
riskpremia <- summary(cross_data)
}else{
## fama-mcbeth regression
famamcbeth_data <- testasset %>%
pivot_longer(cols = -Date,
names_to = "Portfolio",
values_to = "Return") %>%
full_join(loadings_long, by="Portfolio") %>%
group_by(Date) %>%
lm(formula = paste("Return ~", rhs_formula),data=.)
# obtain risk premia
riskpremia <- summary(famamcbeth_data)
}
return(list(residuals=residuals, loadings=loadings,
intercepts= intercepts, riskpremia=riskpremia))
}
# apply the function for different windows
result1 <- cross_sec_test(testasset, factors,model="cross-section",
startdate = "2000-01-01",
enddate = "2008-01-01")
View(result1)
result1[["riskpremia"]]
